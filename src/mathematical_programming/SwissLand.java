package mathematical_programming;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import activity.Activity;
import agent.Farm;
import reader.ReadData;

public class SwissLand implements MP_Interface{

	private static final Logger LOGGER = Logger.getLogger("FARMIND_LOGGING");
	
	@Override
	public void inputsforMP(Farm farm, List<String> possibleActivity) {
		
		List<String> allActivities = new ArrayList<String>();
		
		for(Activity act: farm.getActivities()) {
			allActivities.add(act.getName());
		}

		// edit animal activity file
		try {
            BufferedReader oldScript = new BufferedReader(new FileReader("projdir/DataBaseOut/If_agentTiere.gms"));
            String line;
            String script = "";
            while ((line = oldScript.readLine()) != null) {
            	
            	for(String activity: allActivities ) {
            		String Farm_Activity = String.format("%s.%s", farm.getFarmName(), activity);
            		if (line.contains(Farm_Activity)) {
            			if( possibleActivity.contains(activity) ) {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 1.0);
            			}
            			else {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 0.0);
            			}	
            		}	
            	}
            	
                script += line + '\n';
            }
            
            oldScript.close();
            FileOutputStream newScript = new FileOutputStream("projdir/DataBaseOut/If_agentTiere.gms");
            newScript.write(script.getBytes());
            newScript.close();
        }
		
        catch (IOException ioe) {
        	ioe.printStackTrace();
        }
		
		// edit plant activity file
		try {
            BufferedReader oldScript = new BufferedReader(new FileReader("projdir/DataBaseOut/If_agentPflanze.gms"));
            String line;
            String script = "";
            while ((line = oldScript.readLine()) != null) {
            	
            	for(String activity: allActivities ) {
            		String Farm_Activity = String.format("%s.%s", farm.getFarmName(), activity);
            		if (line.contains(Farm_Activity)) {
            			if( possibleActivity.contains(activity) ) {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 1.0);
            			}
            			else {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 0.0);
            			}	
            		}	
            	}
            	
                script += line + '\n';
            }
            
            oldScript.close();
            FileOutputStream newScript = new FileOutputStream("projdir/DataBaseOut/If_agentPflanze.gms");
            newScript.write(script.getBytes());
            newScript.close();
        }
		
        catch (IOException ioe) {
        	ioe.printStackTrace();
        }
		
		
	}

	@Override
	public void runModel(int nFarm, int year ) {
		Runtime runtime = Runtime.getRuntime();						           // java runtime to run commands
		
		this.editMPscript(nFarm, year);										   // edit the gams script with updated pricing information
		
		File f = new File("projdir\\Grossmargin_P4,00.csv");
		f.delete();
		
		LOGGER.info("Starting MP model");
		
		try {
			String name = System.getProperty("os.name").toLowerCase();
			if (name.startsWith("win") ){
				runtime.exec("cmd /C" + "run_gams.bat");					   // actually run command
			}
			if (name.startsWith("mac")) {
				runtime.exec("/bin/bash -c ./run_gams_mac.command");		   // actually run command
			}
			
			LOGGER.info("Waiting for output generated by MP model");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Double> readMPIncomes(List<Farm> allFarms) {
		List<Double> incomes = new ArrayList<Double>();						   // list of all farm incomes   
		
		List<Object> data = readMPOutputFiles();			                   // read data file generated by MP
		incomes = (List<Double>) data.get(0);

		return incomes;
		// testing merge
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ArrayList<Activity>> readMPActivities(List<Farm> allFarms) {
		List<ArrayList<Activity>> activities = new ArrayList<ArrayList<Activity>>();	   	 	   // list of all farm activities selected by MP model
		
		List<Object> data = readMPOutputFiles();			                                       // read data file generated by MP
		activities = (List<ArrayList<Activity>>) data.get(1);
	
		return activities;
	}

	@Override
	public ArrayList<Activity> getExitActivity() {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * edit the MP gams script with the updated year and price information
	 * @param nFarm: number of farms
	 * @param year: which year in iteration so we can select the proper price information
	 */
    private void editMPscript(int nFarm, int year) {	
    	    	
	}
    
    /** 
	 * Read the MP output files to get income and activities
	 * @return return incomes and activities produced by the MP model
	 */
	public List<Object> readMPOutputFiles() {
		List<Double> incomesFromMP = new ArrayList<Double>();				       // list of all agents' incomes produced by the MP
		List<List<Activity>> activitiesFromMP = new ArrayList<List<Activity>>();   // list of all agents' final activities selected by the MP
		List<Object> incomes_activitiesOutput = new ArrayList<Object>();		   // combination list of incomes and activities to return
		BufferedReader Buffer = null;	 									       // read input file
		String Line;														       // read each line of the file individually
		ArrayList<String> dataArray;										       // separate data line
		ReadData reader = new ReadData();
		
		List<Activity> allPossibleActivities = reader.getActivityList();		   // generated activity list with ID and name 
		
		File f = new File("projdir\\DatabaseIn\\output.csv");					   // actual results file
		while (!f.exists()) {try {
			Thread.sleep(1000);												       // wait until the MP finishes running
		} catch (InterruptedException e) {
			e.printStackTrace();
		}}

		try {
			Buffer = new BufferedReader(new FileReader("projdir\\DatabaseIn\\output.csv"));
			
			Line = Buffer.readLine();
			while ((Line = Buffer.readLine()) != null) {                       
				dataArray = CSVtoArrayList(Line);						          // Read farm's parameters line by line
				incomesFromMP.add( Double.parseDouble(dataArray.get(1)) );
				int size_activity = dataArray.size();
				
				List<Activity> farmActivityList = new ArrayList<Activity>();
				for (int k = 2; k < size_activity; k++) {
					for(int i = 0; i < allPossibleActivities.size(); i++) {
						String name = dataArray.get(k);

						if (allPossibleActivities.get(i).getName().equals(name) ) {
							int ID = allPossibleActivities.get(i).getID();
							Activity p = new Activity(ID, name); 
							farmActivityList.add(p);
						}
					}
				}
				if (farmActivityList.size() > 0) {
					activitiesFromMP.add(farmActivityList);
				}
				
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}									       

		try {
			Buffer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		incomes_activitiesOutput.add(incomesFromMP);
		incomes_activitiesOutput.add(activitiesFromMP);
		return incomes_activitiesOutput;
	}
    
	/**
	 * This function converts data from CSV file into array structure 
	 * @param CSV String from input CSV file to break into array
	 * @return Result ArrayList of strings 
	 */
	private static ArrayList<String> CSVtoArrayList(String CSV) {		       
		ArrayList<String> Result = new ArrayList<String>();
		
		if (CSV != null) {
			String[] splitData = CSV.split("\\s*,\\s*");
			for (int i = 0; i < splitData.length; i++) {
				if (!(splitData[i] == null) || !(splitData[i].length() == 0)) {
					Result.add(splitData[i].trim());
				}
			}
		}
		return Result;
	}
}
