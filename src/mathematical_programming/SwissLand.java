package mathematical_programming;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;
import activity.Activity;
import agent.Farm;
import reader.ReadData;

/** 
 * Use the weedcontrol model from agroscope as an optimizer on the activities. This class runs the model, reads the input, and modifies the required control files. 
 * 
 * @author kellerke
 *
 */
public class SwissLand implements MP_Interface{
	File file; 																   // file object to read/write 							
	String resultsFile;														   // results file
	String gamsModelFileAnimals;											   // gams model file, used for editing actual gams script
	String gamsModelFilePlants;												   // gams model file, used for editing actual gams script
	String gamsIncomeFile;
	String gamsAnimalResultsFile;
	String gamsPlantsResultsFile;
	private static final Logger LOGGER = Logger.getLogger("FARMIND_LOGGING");

	public SwissLand(Properties cmd) {
		gamsModelFileAnimals = String.format("%s\\DataBaseOut\\If_agentTiere.gms",cmd.getProperty("project_folder"));
		gamsModelFilePlants = String.format("%s\\DataBaseOut\\If_agentPflanze.gms",cmd.getProperty("project_folder"));
		gamsPlantsResultsFile = String.format("%s\\DataModelIn\\data_PFLLANDKAP_T0.gms",cmd.getProperty("project_folder"));
		gamsAnimalResultsFile = String.format("%s\\DataModelIn\\data_ANIMALKAP_T0.gms",cmd.getProperty("project_folder"));
		gamsIncomeFile = String.format("%s\\DataModelIn\\data_FARMINCOME_T0.gms",cmd.getProperty("project_folder"));
		resultsFile = String.format("%s\\Grossmargin_P4,00.csv",cmd.getProperty("project_folder"));
	}

	@Override
	// throwaway pricing average and memoryLength average value as it is not used in the Swissland model
	public void runModel(Properties cmd, int nFarm, int year, boolean pricingAverage, int memoryLengthAverage) {
		Runtime runtime = Runtime.getRuntime();						           // java runtime to run commands
		
		this.editMPscript(nFarm, year);										   // edit the gams script with updated pricing information
		
		LOGGER.info("Starting MP model");
		
		try {
			String name = System.getProperty("os.name").toLowerCase();
			if (name.startsWith("win") ){
				createRunGamsBatch(cmd, "win");	
				runtime.exec("cmd /C" + "run_gams.bat");					   // actually run command
			}
			if (name.startsWith("mac")) {
				createRunGamsBatch(cmd, "mac");			
				runtime.exec("/bin/bash -c ./run_gams_mac.command");		   // actually run command
			}
			
			LOGGER.info("Waiting for output generated by MP model");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Create the specific batch file called "run_gams.bat" based on the operating system and the cmd properties. This batch file is used to actually start the MP model.
	 * @param cmd :: command object built from control.properties
	 * @param OS :: String that indicates what operating system. For debugging sometimes a mac is used. 
	 */
	private void createRunGamsBatch(Properties cmd, String OS) {
		if (cmd.getProperty("debug").equals("1")) {
			if (OS.equals("win")) {
				LOGGER.info("Creating run_gams.bat file for debug");
				File f = new File("run_gams.bat");
				f.delete();
				FileWriter fw;
				try {
					fw = new FileWriter(f,true);
					BufferedWriter bw = new BufferedWriter(fw);
					PrintWriter writer = new PrintWriter(bw);
					writer.println( String.format("copy \".\\%s\\data_PFLLANDKAP_T0.gms\" .\\%s\\DataModelIn",cmd.getProperty("data_folder"), 
							cmd.getProperty("project_folder") ));
					writer.println( String.format("copy \".\\%s\\data_FARMINCOME_T0.gms\" .\\%s\\DataModelIn",cmd.getProperty("data_folder"), 
							cmd.getProperty("project_folder") ));
					writer.println( String.format("copy \".\\%s\\data_ANIMALKAP_T0.gms\" .\\%s\\DataModelIn",cmd.getProperty("data_folder"),
							cmd.getProperty("project_folder") ));
					LOGGER.fine("copy DataModelIn results files");
					
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (OS.equals("mac")) {
				LOGGER.info("Creating run_gams_mac file");
				File f = new File("run_gams_mac.command");
				f.delete();
				FileWriter fw;
				try {
					fw = new FileWriter(f,true);
					BufferedWriter bw = new BufferedWriter(fw);
					PrintWriter writer = new PrintWriter(bw);
					writer.println("#!/bin/bash");
					writer.println("cp ./data/Grossmargin_P4,00.csv ./projdir/Grossmargin_P4,00.csv");
					
					writer.println( String.format("cp ./%s/data_PFLLANDKAP_T0.gms\" ./%s/DataModelIn",cmd.getProperty("data_folder"),
							cmd.getProperty("project_folder") ));
					writer.println( String.format("cp ./%s/data_FARMINCOME_T0.gms\" ./%s/DataModelIn",cmd.getProperty("data_folder"),
							cmd.getProperty("project_folder") ));
					writer.println( String.format("cp ./%s/data_ANIMALKAP_T0.gms\" ./%sDataModelIn\\projdir",cmd.getProperty("data_folder"),
							cmd.getProperty("project_folder")));
					
					LOGGER.fine("cp ./data/Grossmargin_P4,00.csv ./projdir/Grossmargin_P4,00.csv");
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		} else {
			LOGGER.info("Creating run_gams.bat file for actual gams system");
			File f = new File("run_gams.bat");
			f.delete();
			FileWriter fw;
			try {
				fw = new FileWriter(f,true);
				BufferedWriter bw = new BufferedWriter(fw);
				PrintWriter writer = new PrintWriter(bw);
				if (cmd.getProperty("project_folder") == null)  {
					LOGGER.severe("Please include parameter project_folder into the control file.");
					System.exit(0);
				}
				String proj = "cd " + cmd.getProperty("project_folder");
				writer.println(proj);
				writer.println("gams 4_SwisslandFarmmodel");
				LOGGER.fine("in command file: " + proj + " gams Fit_StratABM_Cal");
				writer.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public List<Double> readMPIncomes(Properties cmd, List<Farm> allFarms) {
		
		List<Double> incomesFromMP = new ArrayList<Double>();				       // list of all agents' incomes produced by the MP
		BufferedReader Buffer = null;	 									       // read input file
		String Line;														       // read each line of the file individually
				
		File f = new File(gamsIncomeFile);					                       // actual results file
		while (!f.exists()) {try {
			Thread.sleep(1000);												       // wait until the MP finishes running
		} catch (InterruptedException e) {
			e.printStackTrace();
		}}

		try {
			Buffer = new BufferedReader(new FileReader(gamsIncomeFile));
			Line = Buffer.readLine();
			Line = Buffer.readLine();
			while ( ( (Line = Buffer.readLine()) != null ) && Line.matches(".*\\d+.*") ) {  
				String income = parseLineIncome(Line);
				incomesFromMP.add( Double.parseDouble(income) );		
			}
		} catch (IOException e) {
			e.printStackTrace();
		}									       

		try {
			Buffer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return incomesFromMP;
	}
	
	private String parseLineIncome(String Line) {
		String[] words = Line.split("\\.");												   // input data is ugly and needs some editing
		String income = words[2];
		words = income.split(" ");
		income = words[1];
		if(income.contains("/")) { 
			income = income.substring(0, income.length() - 2); 
		}
		return income;
	}
	
	private ArrayList<String> parseLineActivity(String Line) {
		ArrayList<String> data = new ArrayList<String>();
		String[] words = Line.split("\\.");												   // input data is ugly and needs some editing
		String act = words[3];
		String name = words[1];
		words = act.split(" ");
		act = words[0];
		data.add(name);
		data.add(act);
		return data;
	}
	
	@Override
	public List<ArrayList<Activity>> readMPActivities(Properties cmd, List<Farm> allFarms) throws FileNotFoundException, IOException {
		List<ArrayList<Activity>> activitiesFromMP = new ArrayList<ArrayList<Activity>>();   // list of all agents' final activities selected by the MP
		BufferedReader Buffer = null;	 									   // read input file
		String Line;														   // read each line of the file individually
		ArrayList<String> dataArray;										   // separate data line
		ReadData reader = new ReadData(cmd);
		List<Activity> allPossibleActivities = reader.getActivityList();	   // generated activity list with ID and name 
		HashMap<String, ArrayList<Activity>> map = new HashMap<String, ArrayList<Activity>>();
		
		File f = new File(gamsPlantsResultsFile);	   						   // actual results file
		while (!f.exists()) {try {
			Thread.sleep(1000);												   // wait until the MP finishes running
		} catch (InterruptedException e) {
			e.printStackTrace();
		}}

		try {
			Buffer = new BufferedReader(new FileReader(gamsPlantsResultsFile));	
			Line = Buffer.readLine();
			Line = Buffer.readLine();
			while (( (Line = Buffer.readLine()) != null ) && Line.matches(".*\\d+.*")) {                       
				dataArray = parseLineActivity(Line);
				
				ArrayList<Activity> farmActivityList = new ArrayList<Activity>();
				if (map.get(dataArray.get(0)) != null) {
					farmActivityList = map.get(dataArray.get(0));              // if farm already in map, reuse so we can add next activity
				}
								
				for(int i = 0; i < allPossibleActivities.size(); i++) { 
					String name = dataArray.get(1);
					if (allPossibleActivities.get(i).getName().equals(name) ) {
						int ID = allPossibleActivities.get(i).getID();
						Activity p = new Activity(ID, name); 
						farmActivityList.add(p);
					}
				}
				map.put(dataArray.get(0), farmActivityList);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		try {
			Buffer = new BufferedReader(new FileReader(gamsAnimalResultsFile));	
			Line = Buffer.readLine();
			Line = Buffer.readLine();
			while (( (Line = Buffer.readLine()) != null ) && Line.matches(".*\\d+.*")) {                       
				dataArray = parseLineActivity(Line);
				
				ArrayList<Activity> farmActivityList = new ArrayList<Activity>();
				if (map.get(dataArray.get(0)) != null) {
					farmActivityList = map.get(dataArray.get(0));              // if farm already in map, reuse so we can add next activity
				}
								
				for(int i = 0; i < allPossibleActivities.size(); i++) { 
					String name = dataArray.get(1);
					if (allPossibleActivities.get(i).getName().equals(name) ) {
						int ID = allPossibleActivities.get(i).getID();
						Activity p = new Activity(ID, name); 
						farmActivityList.add(p);
					}
				}
				map.put(dataArray.get(0), farmActivityList);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}	
		

		try {
			Buffer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// convert map to ordered list
		for (Farm farm:allFarms) {	
			if (map.get(farm.getFarmName()) != null) {
				activitiesFromMP.add(map.get(farm.getFarmName()));
			} else {
				activitiesFromMP.add( getExitActivity() );
			}
		}

		return activitiesFromMP;
	}
	
	private void checkActivityCombo(List<String> possibleActivity) {
		
		if (possibleActivity.contains("milchkuehe") & !possibleActivity.contains("jungvieh_miku"))  {
			possibleActivity.add("jungvieh_miku");
		}
		if (possibleActivity.contains("milchkuehe") & !possibleActivity.contains("aufzucht_miku"))  {
			possibleActivity.add("aufzucht_miku");
		}
		if (!possibleActivity.contains("milchkuehe") & possibleActivity.contains("aufzucht_miku"))  {
			possibleActivity.remove("aufzucht_miku");
		}
		if (!possibleActivity.contains("milchkuehe") & possibleActivity.contains("jungvieh_miku"))  {
			possibleActivity.remove("jungvieh_miku");
		}		
	}

	@Override
	public void inputsforMP(Farm farm, List<String> possibleActivity) {
		
		List<String> allActivities = new ArrayList<String>();				   // generic list of all activities in system
		
		for(Activity act: farm.getActivities()) {
			allActivities.add(act.getName());
		}
		
		checkActivityCombo(possibleActivity);
		
		// edit animal activity file
		try {
            BufferedReader oldScript = new BufferedReader(new FileReader(gamsModelFileAnimals)); 
            String line;
            String script = "";
            while ((line = oldScript.readLine()) != null) {
            	
            	for(String activity: allActivities ) {
            		String Farm_Activity = String.format("%s.%s", farm.getFarmName(), activity);
            		if (line.contains(Farm_Activity)) {
            			if( possibleActivity.contains(activity) ) {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 1.0);
            			}
            			else {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 0.0);
            			}	
            		}	
            	}
                script += line + '\n';
            }
            
            oldScript.close();
            FileOutputStream newScript = new FileOutputStream(gamsModelFileAnimals); 
            newScript.write(script.getBytes());
            newScript.close();
        }
		
        catch (IOException ioe) {
        	ioe.printStackTrace();
        }
		
		// edit plant activity file
		try {
            BufferedReader oldScript = new BufferedReader(new FileReader(gamsModelFilePlants));
            String line;
            String script = "";
            while ((line = oldScript.readLine()) != null) {
            	
            	for(String activity: allActivities ) {
            		String Farm_Activity = String.format("%s.%s", farm.getFarmName(), activity);
            		if (line.contains(Farm_Activity)) {
            			if( possibleActivity.contains(activity) ) {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 1.0);
            			}
            			else {
            				line = String.format("%s.%s %.2f", farm.getFarmName(), activity, 0.0);
            			}	
            		}	
            	}
                script += line + '\n';
            }
            
            oldScript.close();
            FileOutputStream newScript = new FileOutputStream(gamsModelFilePlants); //"projdir/DataBaseOut/If_agentPflanze.gms");
            newScript.write(script.getBytes());
            newScript.close();
        }
		
        catch (IOException ioe) {
        	ioe.printStackTrace();
        }
	}

	@Override
	public ArrayList<Activity> getExitActivity() {
		ArrayList<Activity> activities = new ArrayList<Activity>();	   	 	       // list of all farm activities selected by MP model
		Activity exit = new Activity(0,"exit_activity");
		activities.add(exit);
	
		return activities;
	}

	/**
	 * edit the MP gams script with the updated year and price information
	 * @param nFarm: number of farms
	 * @param year: which year in iteration so we can select the proper price information
	 */
    private void editMPscript(int nFarm, int year) {	
    	    	
	}

}
